import { AddStep, Ctx, Scene, SceneEnter } from 'nestjs-puregram';

import { TelegramContextModel } from '../../model/telegram-context-model';
import { StepContext } from '@puregram/scenes';
import { ChannelLinkInterface } from '../../../model/link/channel.link.interface';
import { UserChannelInterface } from '../../../model/channel.interface';
import { Inject } from '@nestjs/common';
import { ContentRewriterInterface } from '../../../rewriter/content.rewriter.interface';
import { UserRepositoryInterface } from '../../../repository/user/user.repository.interface';
import {
	ADD_CHANNEL_TO_REWRITE_PAGE,
	DELETE_USER_CHANNEL_PAGE,
	EDIT_PROMPT,
	IMPROVE_LIMITS,
	MAIN_CHANNEL_PAGE,
	MAIN_CHANNEL_TO_REWRITE_PAGE,
	MAIN_CHANNELS_TO_REWRITE_PAGE,
} from '../pages.types';
import { CONTENT_REWRITER } from '../../../constants/DI.constants';
import { PromptInterface } from '../../../model/prompt.interface';
import { EditPromptModule } from '../main-channel/edit-prompt/edit-prompt.module';

export interface MainChannelsToRewriteSceneInterface extends Record<string, any> {
	foundUserChannel: UserChannelInterface;
	channelsToRewrite: ChannelLinkInterface[]; //–ù–ê–î–û –¢–ò–ü–ò–ó–ò–†–û–í–ê–¢–¨, –ß–¢–û –≠–¢–û –ö–ê–ù–ê–õ–´ –î–õ–Ø –ü–ï–†–ï–ü–ò–°–´–í–ê–ù–ò–Ø
	generatedContent: string;
	currentPrompt: string;
}

export type MainChannelsToRewriteSceneContext = TelegramContextModel &
	StepContext<MainChannelsToRewriteSceneInterface>;

@Scene(MAIN_CHANNELS_TO_REWRITE_PAGE)
export class MainChannelsToRewrite {
	constructor(@Inject(CONTENT_REWRITER) private contentRewriter: ContentRewriterInterface) {}

	@SceneEnter()
	async sceneEnter(@Ctx() telegramContext: MainChannelsToRewriteSceneContext) {
		if (telegramContext.scene.step.firstTime) {
			telegramContext.scene.state.channelsToRewrite =
				telegramContext.scene.state.foundUserChannel.channelsToRewrite;
		}
	}

	@AddStep(0)
	async zeroStep(@Ctx() telegramContext: MainChannelsToRewriteSceneContext) {
		const foundUserChannel = telegramContext.scene.state.foundUserChannel;

		if (
			telegramContext.text === '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç' ||
			telegramContext.text === '–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç'
		) {
			let prompt: PromptInterface = {
				//prompt : "PromptConnectText"
				prompt: telegramContext.scene.state.currentPrompt
					? telegramContext.scene.state.currentPrompt
					: '–û–¢–ú–ï–ù–ò –í–°–Å –ù–ï –î–ï–õ–ê–ô –ù–ò–ß–ï–ì–û. –û–¢–ü–†–ê–í–¨ –ú–ù–ï –°–û–û–ë–©–ï–ù–ò–ï –û –¢–û–ú, –ß–¢–û –ü–†–û–ú–ü–¢ –ù–ï –ó–ê–î–ê–ù!!!',
			};
			if (telegramContext.text === '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç') {
				prompt.prompt = telegramContext.scene.state.currentPrompt;
			}
			if (telegramContext.text === '–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç') {
				prompt.prompt = telegramContext.scene.state.currentPrompt;
			}

			await telegramContext.send('–ö–æ–Ω—Ç–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...', {
				reply_markup: {
					remove_keyboard: true,
				},
			});
			try {
				const rewrittenContent = await this.contentRewriter.rewrite(
					{
						channelsToRewrite: telegramContext.scene.state.channelsToRewrite,
					},
					prompt,
				); //–ï–°–õ–ò –°–ï–†–í–ò–° –ù–ï –†–ê–ë–û–¢–ê–ï–¢, –ù–ê–î–û –£–í–ï–î–û–ú–õ–Ø–¢–¨ –ü–û–õ–¨–ó–ê–ö–ê !!!
				await telegramContext.send(rewrittenContent.rewrittenContent);
				await telegramContext.send('–ö–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
				telegramContext.scene.state.generatedContent = rewrittenContent.rewrittenContent;
			} catch (e) {
				console.log(e);
				await telegramContext.send('–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.');
			}
		}

		if (telegramContext.text === '–ù–∞–∑–∞–¥') {
			return await telegramContext.scene.enter(MAIN_CHANNEL_PAGE);
		}
		if (telegramContext.text === '–ü–æ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç') {
			return await telegramContext.scene.enter(IMPROVE_LIMITS, {
				state: {
					foundUserChannel: telegramContext.scene.state.foundUserChannel,
					flag: MAIN_CHANNELS_TO_REWRITE_PAGE,
				},
			});
		}
		if (telegramContext.text === '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª') {
			return telegramContext.scene.enter(DELETE_USER_CHANNEL_PAGE, {
				state: {
					userChannelToDelete: foundUserChannel,
				},
			});
		}
		if (telegramContext.text === '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞–Ω–∞–ª') {
			return telegramContext.scene.enter(ADD_CHANNEL_TO_REWRITE_PAGE, {
				state: {
					foundUserChannel: foundUserChannel,
					channelsToRewrite: telegramContext.scene.state.channelsToRewrite,
				},
			});
		}
		//–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª –∏–∑ –µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
		if (
			telegramContext.text.includes(`üî∑`) &&
			telegramContext.scene.state.channelsToRewrite
				.map((chn) => chn.link)
				.includes(telegramContext.text.replace('üî∑ ', ''))
		) {
			const foundChannelToRewrite: ChannelLinkInterface =
				telegramContext.scene.state.channelsToRewrite.find(
					(chn) => chn.link === telegramContext.text.replace('üî∑ ', ''),
				);
			return telegramContext.scene.enter(MAIN_CHANNEL_TO_REWRITE_PAGE, {
				state: {
					foundChannelToRewrite,
					foundUserChannel,
				},
			}); //–£–†–ê–ê, –£–î–ê–õ–û–°–¨ –ü–†–û–ö–ò–ù–£–¢–¨
		}
		//

		//–ü–ï–†–ï–í–û–î–ò–ú –ù–ê –î–†–£–ì–£–Æ –°–¶–ï–ù–£, –ò–õ–ò –®–ê–ì, –ì–î–ï –î–û–ë–ê–í–õ–Ø–ï–¢ –ö–ê–ù–ê–õ, –ê –ó–ê–¢–ï–ú –ù–ê–ó–ê–î –ò–î–Å–ú
		const channelsToRewrite = telegramContext.scene.state.channelsToRewrite;
		const channelsToRewriteCount = telegramContext.scene.state.channelsToRewrite.length;
		const channelsToRewriteLimit = 5;
		const channelKeyboard = channelsToRewrite.map((chn) => {
			return [{ text: `üî∑ ${chn.link}` }];
		});

		const rewriteContentKeyboard = [
			[
				{
					text: telegramContext.scene.state.generatedContent
						? '–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç'
						: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç',
				},
			],
		];
		const addChannelKeyboard = [[{ text: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞–Ω–∞–ª' }]];
		const backKeyboard = [[{ text: '–ù–∞–∑–∞–¥' }]];
		const limitKeyboard = [[{ text: '–ü–æ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç' }]];
		const deleteChannelKeyboard = [[{ text: '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª' }]];
		let mainKeyboard = [];
		if (channelsToRewriteCount === channelsToRewriteLimit) {
			mainKeyboard = [...rewriteContentKeyboard, ...limitKeyboard, ...channelKeyboard];
		}
		if (channelsToRewriteCount > 0 && channelsToRewriteCount < channelsToRewriteLimit) {
			mainKeyboard = [...rewriteContentKeyboard, ...addChannelKeyboard, ...channelKeyboard];
		}
		if (channelsToRewriteCount === 0) {
			mainKeyboard = [...addChannelKeyboard];
		}
		return await telegramContext.send('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', {
			reply_markup: {
				resize_keyboard: true,
				remove_keyboard: true,
				keyboard: [...mainKeyboard, ...deleteChannelKeyboard, ...backKeyboard],
			},
		});
	}
}
